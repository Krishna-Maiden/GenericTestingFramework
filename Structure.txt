# AI-Powered Generic Testing Framework - Project Structure

```
GenericTestingFramework/
├── .gitignore
├── Directory.Build.props
├── GenericTestingFramework.sln
├── README.md
├── Structure.txt
│
├── src/
│   ├── GenericTestingFramework.Core/
│   │   ├── GenericTestingFramework.Core.csproj
│   │   ├── Interfaces/
│   │   │   ├── ILLMService.cs                    # LLM service interface
│   │   │   ├── ITestExecutor.cs                 # Test executor interface
│   │   │   └── ITestRepository.cs               # Repository interface
│   │   └── Models/
│   │       ├── Enums.cs                         # TestType, TestStatus, TestPriority enums
│   │       ├── TestScenario.cs                  # Test scenario model
│   │       ├── TestStep.cs                      # Test step model
│   │       └── TestResult.cs                    # Test result and step result models
│   │
│   ├── GenericTestingFramework.Services/
│   │   ├── GenericTestingFramework.Services.csproj
│   │   ├── TestAutomationService.cs             # Main orchestration service
│   │   ├── Documents/                           # 🆕 Document management
│   │   │   └── DocumentManager.cs               # User story document manager
│   │   ├── TestGeneration/                      # 🆕 Dynamic test generation
│   │   │   └── DynamicTestGenerator.cs          # Dynamic test case generator
│   │   ├── LLM/
│   │   │   ├── OpenAILLMService.cs              # OpenAI integration
│   │   │   └── LLMConfiguration.cs              # LLM configuration
│   │   ├── Executors/
│   │   │   ├── BaseTestExecutor.cs              # Base executor with common functionality
│   │   │   ├── UITestExecutor.cs                # Selenium WebDriver UI testing
│   │   │   └── APITestExecutor.cs               # HTTP API testing
│   │   └── Repository/
│   │       └── InMemoryTestRepository.cs        # In-memory data storage
│   │
│   ├── GenericTestingFramework.WebAPI/
│   │   ├── GenericTestingFramework.WebAPI.csproj
│   │   ├── Program.cs                           # Web API with minimal APIs
│   │   ├── appsettings.json                     # Production configuration
│   │   ├── appsettings.Development.json         # Development configuration
│   │   ├── GenericTestingFramework.WebAPI.http  # HTTP test file
│   │   └── Properties/
│   │       └── launchSettings.json              # Launch profiles
│   │
│   └── GenericTestingFramework.Console/
│       ├── GenericTestingFramework.Console.csproj
│       ├── Program.cs                           # 🔄 Updated console app with dynamic generation
│       └── appsettings.json                     # Console configuration
│
├── tests/
│   ├── GenericTestingFramework.Tests.Unit/
│   │   ├── GenericTestingFramework.Tests.Unit.csproj
│   │   └── TestAutomationServiceTests.cs        # Unit tests
│   │
│   └── GenericTestingFramework.Tests.Integration/
│       ├── GenericTestingFramework.Tests.Integration.csproj
│       └── TestExecutionIntegrationTests.cs     # Integration tests
│
├── docs/
│   └── README.md                                # Comprehensive documentation
│
├── screenshots/                                 # Auto-generated screenshots
│
└── user-stories/                               # 🆕 Example user story files
    ├── confessions_portal_auth.txt             # Confessions portal authentication
    ├── ecommerce_checkout.txt                  # E-commerce checkout flow
    ├── user_registration.txt                   # User registration flow
    └── api_testing.txt                         # API testing scenarios
```

## 🔥 New Features Added

### 📄 Document Management Layer
```
Services/Documents/
├── IDocumentManager.cs         # Interface for document operations
├── DocumentManager.cs          # Manages user story documents
└── UserStoryDocument.cs        # Document model with metadata
```

### 🤖 Dynamic Test Generation Engine
```
Services/TestGeneration/
├── DynamicTestGenerator.cs     # Replaces hardcoded MockLLMService
├── UserStoryAnalysis.cs        # Analysis result model
└── TestGenerationEngine.cs     # Core generation logic
```

## 📁 Key File Purposes

### Core Layer
- **`ILLMService.cs`**: Contract for test generation services
- **`ITestExecutor.cs`**: Contract for test execution engines  
- **`TestScenario.cs`**: Complete test scenario with steps and metadata
- **`TestResult.cs`**: Execution results with step-by-step details

### Services Layer
- **`DocumentManager.cs`**: 
  - Upload user story files (.txt, .md, .docx)
  - Create documents from text input
  - Extract project context automatically
  - Manage document lifecycle

- **`DynamicTestGenerator.cs`**:
  - Analyzes user stories using NLP techniques
  - Extracts URLs, credentials, actions, form fields
  - Generates test steps dynamically (no hardcoding)
  - Determines test type and priority automatically

- **`UITestExecutor.cs`**: 
  - Complete Selenium WebDriver implementation
  - Supports all major UI actions (click, type, verify, etc.)
  - Cross-browser compatibility (Chrome, Firefox, Edge)
  - Screenshot capture and error handling

- **`TestAutomationService.cs`**: 
  - Main orchestration layer
  - Coordinates document management and test generation
  - Manages test execution and results

### Console Application
- **`Program.cs`**: 
  - Interactive demo of dynamic test generation
  - User story input (text or file upload)
  - Real-time test execution with detailed reporting
  - Document management capabilities

### Configuration Files
```
appsettings.json:
├── LLM Configuration          # OpenAI/LLM settings
├── UITestConfiguration        # Selenium WebDriver settings  
├── APITestConfiguration       # HTTP client settings
└── Logging Configuration      # Application logging
```

## 🚀 Execution Flow

```
1. User Input
   ├── Text: "Test auth with admin@confess.com at https://portal.com"
   ├── File: Upload user story document
   └── Interactive: Console prompts for input

2. Document Processing
   ├── DocumentManager creates UserStoryDocument
   ├── Extracts project context automatically
   └── Stores document with metadata

3. Dynamic Analysis
   ├── DynamicTestGenerator analyzes content
   ├── Extracts: URLs, credentials, actions, keywords
   ├── Determines: Test type, priority, flow type
   └── Generates: Test steps, preconditions, outcomes

4. Test Execution
   ├── UITestExecutor launches browser
   ├── Executes generated steps sequentially
   ├── Captures screenshots on failures
   └── Returns detailed results

5. Reporting
   ├── Step-by-step execution results
   ├── Success/failure analysis
   ├── Performance metrics
   └── Failure diagnostics
```

## 🛠️ Technology Stack

- **Framework**: .NET 8.0
- **UI Testing**: Selenium WebDriver 4.15
- **API Testing**: HttpClient with JSON support
- **Web API**: ASP.NET Core Minimal APIs
- **Logging**: Microsoft.Extensions.Logging
- **Configuration**: appsettings.json with environment overrides
- **Testing**: xUnit with FluentAssertions and Moq
- **Documentation**: Swagger/OpenAPI integration

## 📦 NuGet Packages

### Core Dependencies
- Microsoft.Extensions.* (8.0.0) - DI, Logging, Configuration
- System.Text.Json (8.0.0) - JSON serialization
- System.ComponentModel.Annotations (5.0.0) - Model validation

### Selenium WebDriver
- Selenium.WebDriver (4.15.0)
- Selenium.WebDriver.ChromeDriver (119.0.6045.10500)
- Selenium.WebDriver.GeckoDriver (0.33.0)
- Selenium.WebDriver.MSEdgeDriver (119.0.2151.58)
- Selenium.Support (4.15.0)
- DotNetSeleniumExtras.WaitHelpers (3.11.0)

### Testing
- Microsoft.NET.Test.Sdk (17.8.0)
- xunit (2.4.2)
- FluentAssertions (6.12.0)
- Moq (4.20.69)
- Microsoft.AspNetCore.Mvc.Testing (8.0.0)

This structure provides a clean separation of concerns with dynamic test generation capabilities, making it easy to extend and maintain.